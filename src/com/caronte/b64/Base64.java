package com.caronte.b64;

public class Base64 
{
	private static int[] code = 
	{
		/*000-015*/ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 
		/*016-031*/ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 
		/*032-047*/ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3E,0xFF,0xFF,0xFF,0x3F, 
		/*048-063*/ 0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0xFF,0xFF,0xFF,0x40,0xFF,0xFF, 
		/*064-079*/ 0xFF,0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E, 
		/*080-095*/ 0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0xFF,0xFF,0xFF,0xFF,0xFF, 
		/*096-111*/ 0xFF,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28, 
		/*112-127*/ 0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0xFF,0xFF,0xFF,0xFF,0xFF, 
		/*128-143*/ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 
		/*144-159*/ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 
		/*160-175*/ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 
		/*176-191*/ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 
		/*192-207*/ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 
		/*208-223*/ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 
		/*224-239*/ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 
		/*240-255*/ 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF 
	};
	
	private static char[] symbol =
	{
		'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',
		'Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f',
		'g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v',
		'w','x','y','z','0','1','2','3','4','5','6','7','8','9','+','/'
	};
	
	public static String encode(byte[] data) throws Exception
	{
		StringBuffer result = new StringBuffer();
		
		if (data != null)
		{
			int total = data.length;
			byte a;
			byte b;
			byte c;
			
			for (int i = 0; i < total; i+= 3)
			{			
				a = data[i + 0];
				b = ((i + 1) < total) ? data[i + 1] : 0;
				c = ((i + 2) < total) ? data[i + 2] : 0;

				result.append(symbol[a >>> 2]);
				result.append(symbol[((a & 0x03) << 4) | (b >>> 4)]);
				result.append(((i + 1) < total) ? symbol[((b & 0x0F) << 2) | (c >>> 6)] : '=');
				result.append(((i + 2) < total) ? symbol[c & 0x3F] : '=');			
			}
		}
					
		return result.toString();
	}
	
	public static byte[] decode(String stringB64) throws Exception
	{
        if (stringB64.length() % 4 != 0)    
        {
            throw new IllegalArgumentException("Invalid Base64 input string");
        }
        
		int i = 0;
		int j = 0;
		byte[] result = null;
		
		try
		{
			char[] array = stringB64.toCharArray();
			int total = array.length;
			result = new byte[(total * 6) >> 3];
			
			for (i = 0; i < total; i+=4) 
			{
				int b1 = code[array[i + 0]];
				int b2 = code[array[i + 1]];
				int b3 = code[array[i + 2]];
				int b4 = code[array[i + 3]];
				
				if (b1 == 0xFF || b2 == 0xFF || b3 == 0xFF || b4 == 0xFF)
				{
					throw new Exception();
				}
			
				result[j++] = (byte) ((b1 << 2) | (b2 >> 4));
				
				if (b3 < 64)
				{
					result[j++] = (byte) ((b2 << 4) | (b3 >> 2));
					
					if (b4 < 64)
					{
						result[j++] = (byte) ((b3 << 6) | b4);
					}
				}
			}
		}
		catch(Exception e)
		{
			throw new Exception("Invalid Base64 input string");
		}
		
		return result;
	}
}
